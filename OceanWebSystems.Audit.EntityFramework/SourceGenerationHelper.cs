using System.Collections;
using System.Collections.Specialized;
using System.Text;
using Microsoft.CodeAnalysis;

namespace OceanWebSystems.Audit.EntityFramework
{
    internal static class SourceGenerationHelper
    {
        internal const string Options = @"// <auto-generated />

#nullable enable

namespace OceanWebSystems.Audit.EntityFramework
{
    public class AuditConfigurationOptions
    {
        public string? TableNamePrefix { get; set; }

        public string? TableNameSuffix { get; set; }

        public string? SoftDeleteColumnName { get; set; }

        public bool? SoftDeleteDeletedValue { get; set; }
    }
}
";

        internal const string Attribute = @"// <auto-generated />

using System;

#nullable enable

namespace OceanWebSystems.Audit.EntityFramework
{
    public class AuditConfigurationAttribute : Attribute
    {
        public AuditConfigurationAttribute(
            string tableNamePrefix = """",
            string tableNameSuffix = ""AuditRecord"",
            string softDeleteColumnName = ""IsDeleted"",
            bool softDeleteDeletedValue = true)
        {
            TableNamePrefix = tableNamePrefix;
            TableNameSuffix = tableNameSuffix;
            SoftDeleteColumnName = softDeleteColumnName;
            SoftDeleteDeletedValue = softDeleteDeletedValue;
        }

        public AuditConfigurationAttribute(AuditConfigurationOptions configOptions)
        {
            TableNamePrefix = configOptions.TableNamePrefix;
            TableNameSuffix = configOptions.TableNameSuffix;
            SoftDeleteColumnName = configOptions.SoftDeleteColumnName;
            SoftDeleteDeletedValue = configOptions.SoftDeleteDeletedValue;
        }

        public string? TableNamePrefix { get; }

        public string? TableNameSuffix { get; }

        public string? SoftDeleteColumnName { get; }

        public bool? SoftDeleteDeletedValue { get; }
    }
}
";

        internal const string Interface = @"// <auto-generated />

using System;

namespace OceanWebSystems.Audit.EntityFramework
{
    public interface IAuditRecord
    {
        DateTime AuditDate { get; set; }

        string AuditAction { get; set; }

        int? AuditUserId { get; set; }

        string AuditUserName { get; set; }

        string AuditUserDisplayName { get; set; }
    }
}
";

        internal const string BaseClass = @"// <auto-generated />

using System;

namespace OceanWebSystems.Audit.EntityFramework
{
    public abstract class AuditRecordBase : IAuditRecord
    {
        public DateTime AuditDate { get; set; }

        public string AuditAction { get; set; }

        public int? AuditUserId { get; set; }

        public string AuditUserName { get; set; }

        public string AuditUserDisplayName { get; set; }
    }
}
";

        internal static string GenerateAuditClass(
            ITypeSymbol type,
            List<ISymbol> symbols,
            string tableNamePrefix,
            string tableNameSuffix)
        {
            if (string.IsNullOrEmpty(tableNameSuffix))
            {
                tableNameSuffix = "AuditRecord";
            }

            var format = new SymbolDisplayFormat(
                typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameOnly,
                miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes);

            var ns = type.ContainingNamespace.ToString();
            var name = type.Name;

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.ComponentModel.DataAnnotations;");
            sb.AppendLine("using OceanWebSystems.Audit.EntityFramework;");
            sb.AppendLine();
            sb.AppendLine($"namespace {ns}");
            sb.AppendLine("{");
            sb.AppendLine($"\tpublic partial class {tableNamePrefix}{name}{tableNameSuffix} : AuditRecordBase");
            sb.AppendLine("\t{");

            sb.AppendLine("\t\t[Key]");
            sb.AppendLine("\t\tpublic int AuditId { get; set; }");

            foreach (var symbol in symbols)
            {
                if (symbol is IPropertySymbol property)
                {
                    if (property.Type.IsValueType)
                    {
                        var fieldName = property.Name;
                        var fieldType = property.Type.ToDisplayString(format);

                        sb.AppendLine();
                        sb.AppendLine($"\t\tpublic {fieldType} {fieldName} {{ get; set; }}");
                    }
                }
            }

            sb.AppendLine("\t}");
            sb.AppendLine("}");

            return sb.ToString();
        }

        internal static string GenerateDbContextClass(
            ITypeSymbol type,
            Hashtable propertiesAndNamespaces)
        {
            var dbContextNamespace = type.ContainingNamespace.ToString();
            var dbContextName = type.Name;

            // Get the namespaces.
            var namespaces = propertiesAndNamespaces.Values.Cast<string>().Distinct().ToList();
            var properties = propertiesAndNamespaces.Keys.Cast<string>().ToList();

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using Microsoft.EntityFrameworkCore;");

            foreach (var ns in namespaces)
            {
                sb.AppendLine($"using {ns};");
            }

            sb.AppendLine();
            sb.AppendLine($"namespace {dbContextNamespace}");
            sb.AppendLine("{");
            sb.AppendLine($"\tpublic partial class {dbContextName}");
            sb.AppendLine("\t{");

            for (int i = 0; i < properties.Count; i++)
            {
                sb.AppendLine($"\t\t{properties[i]}");
                if (i< properties.Count - 1)
                {
                    sb.AppendLine();
                }
            }

            sb.AppendLine("\t}");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}

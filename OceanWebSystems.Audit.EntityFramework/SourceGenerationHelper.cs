using System.Text;
using Microsoft.CodeAnalysis;

namespace OceanWebSystems.Audit.EntityFramework
{
    internal static class SourceGenerationHelper
    {
        internal const string Interface = @"// <auto-generated />

using System;

namespace OceanWebSystems.Audit.EntityFramework
{
    public interface IAudit
    {
        DateTime AuditDate { get; set; }

        string AuditAction { get; set; }

        int? UserId { get; set; }

        string UserName { get; set; }

        string UserDisplayName { get; set; }
    }
}
";

        internal const string BaseClass = @"// <auto-generated />

using System;

namespace OceanWebSystems.Audit.EntityFramework
{
    public abstract class AuditBase : IAudit
    {
        public DateTime AuditDate { get; set; }

        public string AuditAction { get; set; }

        public int? UserId { get; set; }

        public string UserName { get; set; }

        public string UserDisplayName { get; set; }
    }
}
";

        internal static string GenerateAuditClass(ITypeSymbol type, List<ISymbol> symbols)
        {
            var format = new SymbolDisplayFormat(
                typeQualificationStyle: SymbolDisplayTypeQualificationStyle.NameOnly,
                miscellaneousOptions: SymbolDisplayMiscellaneousOptions.UseSpecialTypes);

            var ns = type.ContainingNamespace.ToString();
            var name = type.Name;

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.AppendLine();
            sb.AppendLine("using System;");
            sb.AppendLine("using System.ComponentModel.DataAnnotations;");
            sb.AppendLine("using OceanWebSystems.Audit.EntityFramework;");
            sb.AppendLine();
            sb.AppendLine($"namespace {ns}");
            sb.AppendLine("{");
            sb.AppendLine($"\tpublic partial class {name}Audit : AuditBase");
            sb.AppendLine("\t{");

            sb.AppendLine("\t\t[Key]");
            sb.AppendLine("\t\tpublic int AuditId { get; set; }");

            foreach (var symbol in symbols)
            {
                if (symbol is IPropertySymbol property)
                {
                    if (property.Type.IsValueType)
                    {
                        var fieldName = property.Name;
                        var fieldType = property.Type.ToDisplayString(format);

                        sb.AppendLine();
                        sb.AppendLine($"\t\tpublic {fieldType} {fieldName} {{ get; set; }}");
                    }
                }
            }

            sb.AppendLine("\t}");
            sb.AppendLine("}");

            return sb.ToString();
        }
    }
}
